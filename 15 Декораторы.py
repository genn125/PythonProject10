# Декораторы


def dekorator(fn):  # передается вся ф-ия my_function как параметр fn.
    def wrapper(*args, **kwargs):     # Сюда передаются автоматически параметры из вызова my_function, wrapper_f посредник
                            # и передает аргументы в fn().

# Действия перед исполнением оригинальной функции.
        print('Выполнено перед выполнением функции my_function()')
        print(f'Имя моей функции: {fn.__name__}')
        print(f'Аргументы моей функции: {args}, {kwargs}','\n')
        res = fn(*args, **kwargs)
# Действия после исполнением оригинальной функции.
        print('Выполнено после выполнением функции my_function()')
        print('А внутри wrapper(*args, **kwargs) есть доступ к результату выполнения функции my_function(), вот он: ', res)



        return res

    return wrapper    # не вызываем (без скобок()), а просто возвращаем результат wrapper_f.


#  Декоратор. Передаёт всю последующую в функцию dekorator.
@dekorator
def my_function(a, b):
    print('Это моя функция my_function()''\n')
    return a* b
#  так как wrapper(*args, **kwargs), то можно передавать любые аргументы
print('\n', '1 - конечный результат: ', my_function(5,2))     # Аргументы моей функции: (5, 2), {}
print('###################')
print('\n','2 - конечный результат: ', my_function(a=5, b=2))       # Аргументы моей функции: (), {'a': 5, 'b': 2}
